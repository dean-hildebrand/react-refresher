{"ast":null,"code":"var _jsxFileName = \"/Users/DeanHildebrand/Desktop/Mosh/ReactJS/vidly/src/components/Movies.jsx\";\nimport React, { Component } from \"react\";\nimport Like from \"../common/Like\";\nimport Pagination from \"../common/Pagination\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport { paginate } from \"../utils/paginate\";\nimport Genres from \"./genres\";\nimport MoviesTable from \"./MoviesTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      selectedGenre: \"\",\n      currentPage: 1,\n      pageSize: 4\n    };\n\n    this.handleDelete = movie => {\n      const movies = this.state.movies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        currentPage: 1\n      });\n    };\n  }\n\n  componentDidMount() {\n    const genres = [{\n      name: \"All Genres\"\n    }, ...getGenres()];\n    this.setState({\n      movies: getMovies(),\n      genres\n    });\n  }\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      movies: allMovies,\n      selectedGenre\n    } = this.state;\n    if (count === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no movies in the database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }, this);\n    const filteredMovies = selectedGenre && selectedGenre._id ? allMovies.filter(m => m.genre._id === selectedGenre._id) : allMovies;\n    const movies = paginate(filteredMovies, currentPage, pageSize);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(Genres, {\n          genres: this.state.genres,\n          onGenreSelect: this.handleGenreSelect,\n          selectedGenre: selectedGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"There are \", filteredMovies.length, \" movies in your collection\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MoviesTable, {\n          movies: movies,\n          onDelete: this.handleDelete,\n          onLike: this.handleLike\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n          itemsCount: filteredMovies.length,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          onPageChange: this.handlePageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/DeanHildebrand/Desktop/Mosh/ReactJS/vidly/src/components/Movies.jsx"],"names":["React","Component","Like","Pagination","getMovies","getGenres","paginate","Genres","MoviesTable","Movies","state","movies","genres","selectedGenre","currentPage","pageSize","handleDelete","movie","filter","m","_id","setState","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","componentDidMount","name","render","length","count","allMovies","filteredMovies"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Like from \"../common/Like\";\nimport Pagination from \"../common/Pagination\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport { paginate } from \"../utils/paginate\";\nimport Genres from \"./genres\";\nimport MoviesTable from \"./MoviesTable\";\n\nexport default class Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    selectedGenre: \"\",\n    currentPage: 1,\n    pageSize: 4,\n  };\n\n  componentDidMount() {\n    const genres = [{ name: \"All Genres\" }, ...getGenres()];\n\n    this.setState({ movies: getMovies(), genres });\n  }\n\n  handleDelete = (movie) => {\n    const movies = this.state.movies.filter((m) => m._id !== movie._id);\n    this.setState({\n      movies,\n    });\n  };\n\n  handleLike = (movie) => {\n    const movies = [...this.state.movies];\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movies[index] };\n    movies[index].liked = !movies[index].liked;\n    this.setState({\n      movies,\n    });\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  handleGenreSelect = (genre) => {\n    this.setState({ selectedGenre: genre, currentPage: 1 });\n  };\n\n  render() {\n    const { length: count } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      movies: allMovies,\n      selectedGenre,\n    } = this.state;\n\n    if (count === 0) return <p>There are no movies in the database</p>;\n\n    const filteredMovies =\n      selectedGenre && selectedGenre._id\n        ? allMovies.filter((m) => m.genre._id === selectedGenre._id)\n        : allMovies;\n\n    const movies = paginate(filteredMovies, currentPage, pageSize);\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <Genres\n            genres={this.state.genres}\n            onGenreSelect={this.handleGenreSelect}\n            selectedGenre={selectedGenre}\n          />\n        </div>\n        <div className=\"col\">\n          <h3>There are {filteredMovies.length} movies in your collection</h3>\n\n          <MoviesTable\n            movies={movies}\n            onDelete={this.handleDelete}\n            onLike={this.handleLike}\n          />\n\n          <Pagination\n            itemsCount={filteredMovies.length}\n            pageSize={pageSize}\n            currentPage={currentPage}\n            onPageChange={this.handlePageChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}